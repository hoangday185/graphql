// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) // Dùng UUID
  name      String
  email     String    @unique
  posts     Post[]    // Quan hệ 1-n: Một User có thể có nhiều bài viết
  profile   Profile?  // Quan hệ 1-1: Mỗi User có thể có một Profile
  likes     Like[]    // Quan hệ 1-n: User có thể thích nhiều bài viết
  followers Follow[]  @relation("FollowersRelation")
  following Follow[]  @relation("FollowingRelation")
  comment   Comment[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id        String  @id @default(uuid()) // Dùng UUID
  bio       String?
  avatarUrl String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Post {
  id          String    @id @default(uuid()) // Dùng UUID
  title       String
  content     String?
  published   Boolean   @default(false)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  categories  Category[] @relation("PostCategories")
  tags        Tag[]     @relation("PostTags")
  likes       Like[]    // Quan hệ 1-n: Bài viết có thể được thích bởi nhiều người dùng
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id      String   @id @default(uuid()) // Dùng UUID
  name    String   @unique
  posts   Post[]   @relation("PostCategories")
}

model Tag {
  id      String   @id @default(uuid()) // Dùng UUID
  name    String   @unique
  posts   Post[]   @relation("PostTags")
}

model Comment {
  id          String   @id @default(uuid()) // Dùng UUID
  content     String
  postId      String
  post        Post     @relation(fields: [postId], references: [id])
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
}

model Like {
  id      String   @id @default(uuid()) // Dùng UUID
  postId  String
  userId  String
  post    Post    @relation(fields: [postId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Follow {
  id         String  @id @default(uuid()) // Dùng UUID
  followerId String
  followingId String
  follower   User   @relation("FollowersRelation", fields: [followerId], references: [id])
  following  User   @relation("FollowingRelation", fields: [followingId], references: [id])
}